# Ontwikkelstappen voor Huisarts open voor inschrijving

## Must-haves

1. **Basisprojectstructuur opzetten**
   - Aanmaken van het Apps Script project
   - Instellen van het appsscript.json manifest
   - Toevoegen van benodigde OAuth scopes
   - Toevoegen van Config.gs met basis configuratie
   - STATUS: ✅ Voltooid (PR #2 gemerged)

2. **Google Spreadsheet datamodel opzetten**
   - Opzetten van een Google Spreadsheet als database
   - Tabellen voor gebruikers, huisartsen, en monitoring logs
   - Implementeren van DataLayer.gs voor CRUD-operaties
   - STATUS: ✅ Voltooid (PR #4 gemerged)

3. **Authenticatie implementeren**
   - Ontwikkelen van AuthService.gs
   - Instellen van Google OAuth authenticatie
   - Koppelen van gebruikersgegevens aan de datamodel
   - STATUS: ✅ Voltooid (PR #6 gemerged)

4. **Web interface ontwikkelen**
   - Ontwikkelen van UI.gs
   - Maken van basis HTML-templates
   - Implementeren van gebruikersregistratie en inlogscherm
   - Dashboard voor beheren van huisartsenlijst
   - STATUS: ✅ Voltooid (PR #8 gemerged)

5. **OpenAI Web Search API integratie**
   - Implementeren van OpenAIService.gs
   - API key management
   - Functionaliteit voor het controleren van website inhoud
   - STATUS: ✅ Voltooid (PR #10 gemerged)

6. **Website monitoring systeem**
   - Ontwikkelen van WebsiteChecker.gs
   - Logica voor het periodiek controleren van websites
   - Detecteren van veranderingen in status
   - Zorgen dat websites niet dubbel worden gecontroleerd
   - STATUS: ✅ Voltooid (Direct gecommit naar main)

7. **Email notificatie systeem**
   - Ontwikkelen van EmailService.gs
   - Templates voor notificatie emails
   - Systeem voor het verzenden van notificaties bij statuswijzigingen
   - STATUS: Nog niet gestart

8. **Logging en error handling**
   - Implementeren van Logger.gs
   - Foutafhandeling in alle modules
   - Gebruikersgerichte foutmeldingen in UI
   - STATUS: Logger.gs geïmplementeerd (PR #2 gemerged), integratie in overige modules voltooid

9. **Triggers en scheduling**
   - Instellen van periodieke controles via triggers
   - Optimalisatie van controlefrequentie
   - Balanceren van API-aanroepen voor kostenefficiëntie
   - STATUS: ✅ Voltooid (Geïmplementeerd in WebsiteChecker.gs en bijgewerkt in Code.gs)

10. **Testen en bugfixing**
    - End-to-end testen van de applicatie
    - Foutscenario's testen
    - Oplossen van bugs
    - STATUS: Testfunctionaliteit voor DataLayer, AuthService en WebsiteChecker geïmplementeerd, volledige systeemtests nog niet gestart

## Nice-to-haves

1. **Geavanceerde gebruikersinstellingen**
   - Aanpasbare controlefrequentie per website
   - Prioriteiten voor websites instellen
   - Mogelijkheid voor gebruikers om notificatie-instellingen aan te passen

2. **Dashboard met statistieken**
   - Visualisatie van controlegeschiedenis
   - Statistieken over statusveranderingen
   - Trends in beschikbaarheid van huisartsen

3. **Verbeterde context-analyse**
   - Meer gedetailleerde informatie uit websites halen
   - Beter begrijpen van specifieke inschrijvingsvoorwaarden
   - Detectie van wachtlijsten en geschatte wachttijden

4. **Multi-taal ondersteuning**
   - Nederlands en Engels als ondersteunde talen
   - Vertalingen voor gebruikersinterface en notificaties

5. **Admin-dashboard**
   - Overzicht van alle gebruikers en gemonitorde websites
   - Mogelijkheid om systeeminstellingen aan te passen
   - Monitoring van API-gebruik en kosten

6. **Export-functionaliteit**
   - Exporteren van resultaten naar CSV/Excel
   - Rapporten genereren over beschikbaarheid

7. **Mobile-friendly interface**
   - Responsieve design voor de webinterface
   - Optimalisatie voor mobiele apparaten

8. **Documentatie**
   - Gebruikershandleiding
   - Installatie-instructies voor beheerders
   - API-documentatie

9. **Integratie met andere systemen**
   - Webhooks voor integratie met andere applicaties
   - API voor toegang tot de data

10. **Performantie-optimalisaties**
    - Caching van resultaten
    - Optimalisatie van database-queries
    - Efficiënter gebruik van API-calls

## Opmerkingen:
- Script ID is nog niet bekend, dit moet opgevraagd worden nadat het Apps Script project is aangemaakt.
- Voor het gebruik van de OpenAI Web Search API is een API key nodig, die veilig moet worden opgeslagen.
- Nadat het eerste prototype werkt, moet er feedback verzameld worden voor verdere verbeteringen.
- Bij de finale versie moet een volledige handleiding worden opgesteld.

## Volgende stappen na WebsiteChecker.gs implementatie:
Nu dat de WebsiteChecker.gs module is geïmplementeerd, is de volgende stap het ontwikkelen van de EmailService.gs module. Deze module is verantwoordelijk voor het notificeren van gebruikers bij statusveranderingen van hun gecontroleerde huisartsenpraktijken.

### Aanbevolen volgorde:

1. **EmailService.gs implementeren**
   - Ontwikkelen van de EmailService.gs module voor het versturen van notificaties aan gebruikers
   - Templates voor e-mails maken voor verschillende soorten notificaties (vooral statusveranderingen)
   - Integreren met de DataLayer en WebsiteChecker om gebruikers te notificeren bij statusveranderingen
   - Functionaliteit voor het beheren van e-mailvoorkeuren van gebruikers

2. **Volledige end-to-end testen**
   - Testen van de gehele workflow: van het controleren van websites tot het versturen van notificaties
   - Testen van verschillende scenario's (nieuwe praktijk, statusverandering, geen verandering)
   - Foutscenario's testen en verbeteren van error handling

3. **Gebruikersinterface verbeteren**
   - Toevoegen van functionaliteit om handmatige controles te starten vanuit de UI
   - Weergeven van controleresultaten en geschiedenis in de gebruikersinterface
   - Verbeteren van gebruikerservaring voor het beheren van huisartsenpraktijken

De EmailService.gs implementatie is noodzakelijk voor de basiswerking van de applicatie, omdat het essentieel is voor gebruikers om genotificeerd te worden wanneer de status van hun huisartsenpraktijk verandert. Dit is de kerntaak van de applicatie: niet alleen websites controleren, maar ook gebruikers proactief informeren over veranderingen.

De volgende twee stappen (end-to-end testen en UI verbeteringen) zijn eveneens belangrijk, maar zijn meer gericht op het verbeteren van de stabiliteit en gebruikerservaring van de applicatie, en zijn strikt genomen niet noodzakelijk voor de basisfunctionaliteit.
